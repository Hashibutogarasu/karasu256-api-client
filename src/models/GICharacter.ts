/* tslint:disable */
/* eslint-disable */
/**
 * Karasu Lab API
 * API documentation for Karasu Lab
 *
 * The version of the OpenAPI document: 4.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Gallery } from './Gallery';
import {
    GalleryFromJSON,
    GalleryFromJSONTyped,
    GalleryToJSON,
    GalleryToJSONTyped,
} from './Gallery';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { VersionsEntity } from './VersionsEntity';
import {
    VersionsEntityFromJSON,
    VersionsEntityFromJSONTyped,
    VersionsEntityToJSON,
    VersionsEntityToJSONTyped,
} from './VersionsEntity';
import type { ArtifactSets } from './ArtifactSets';
import {
    ArtifactSetsFromJSON,
    ArtifactSetsFromJSONTyped,
    ArtifactSetsToJSON,
    ArtifactSetsToJSONTyped,
} from './ArtifactSets';
import type { Weapon } from './Weapon';
import {
    WeaponFromJSON,
    WeaponFromJSONTyped,
    WeaponToJSON,
    WeaponToJSONTyped,
} from './Weapon';

/**
 * 
 * @export
 * @interface GICharacter
 */
export interface GICharacter {
    /**
     * 
     * @type {string}
     * @memberof GICharacter
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GICharacter
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GICharacter
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GICharacter
     */
    icon_url: string;
    /**
     * 
     * @type {string}
     * @memberof GICharacter
     */
    element?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GICharacter
     */
    rarity: number;
    /**
     * 
     * @type {string}
     * @memberof GICharacter
     */
    header_img_url: string | null;
    /**
     * 
     * @type {string}
     * @memberof GICharacter
     */
    weapon_type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GICharacter
     */
    property?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GICharacter
     */
    uninplemented: boolean;
    /**
     * 
     * @type {Date}
     * @memberof GICharacter
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof GICharacter
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof GICharacter
     */
    implemented_date?: string | null;
    /**
     * 
     * @type {Country}
     * @memberof GICharacter
     */
    region?: Country | null;
    /**
     * 
     * @type {Weapon}
     * @memberof GICharacter
     */
    weapon?: Weapon | null;
    /**
     * 
     * @type {VersionsEntity}
     * @memberof GICharacter
     */
    version?: VersionsEntity | null;
    /**
     * 
     * @type {Array<ArtifactSets>}
     * @memberof GICharacter
     */
    artifact_set?: Array<ArtifactSets> | null;
    /**
     * 
     * @type {Array<Gallery>}
     * @memberof GICharacter
     */
    galleries?: Array<Gallery> | null;
}

/**
 * Check if a given object implements the GICharacter interface.
 */
export function instanceOfGICharacter(value: object): value is GICharacter {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('icon_url' in value) || value['icon_url'] === undefined) return false;
    if (!('rarity' in value) || value['rarity'] === undefined) return false;
    if (!('header_img_url' in value) || value['header_img_url'] === undefined) return false;
    if (!('uninplemented' in value) || value['uninplemented'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function GICharacterFromJSON(json: any): GICharacter {
    return GICharacterFromJSONTyped(json, false);
}

export function GICharacterFromJSONTyped(json: any, ignoreDiscriminator: boolean): GICharacter {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'icon_url': json['icon_url'],
        'element': json['element'] == null ? undefined : json['element'],
        'rarity': json['rarity'],
        'header_img_url': json['header_img_url'],
        'weapon_type': json['weapon_type'] == null ? undefined : json['weapon_type'],
        'property': json['property'] == null ? undefined : json['property'],
        'uninplemented': json['uninplemented'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'implemented_date': json['implemented_date'] == null ? undefined : json['implemented_date'],
        'region': json['region'] == null ? undefined : CountryFromJSON(json['region']),
        'weapon': json['weapon'] == null ? undefined : WeaponFromJSON(json['weapon']),
        'version': json['version'] == null ? undefined : VersionsEntityFromJSON(json['version']),
        'artifact_set': json['artifact_set'] == null ? undefined : ((json['artifact_set'] as Array<any>).map(ArtifactSetsFromJSON)),
        'galleries': json['galleries'] == null ? undefined : ((json['galleries'] as Array<any>).map(GalleryFromJSON)),
    };
}

export function GICharacterToJSON(json: any): GICharacter {
    return GICharacterToJSONTyped(json, false);
}

export function GICharacterToJSONTyped(value?: GICharacter | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'icon_url': value['icon_url'],
        'element': value['element'],
        'rarity': value['rarity'],
        'header_img_url': value['header_img_url'],
        'weapon_type': value['weapon_type'],
        'property': value['property'],
        'uninplemented': value['uninplemented'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'implemented_date': value['implemented_date'],
        'region': CountryToJSON(value['region']),
        'weapon': WeaponToJSON(value['weapon']),
        'version': VersionsEntityToJSON(value['version']),
        'artifact_set': value['artifact_set'] == null ? undefined : ((value['artifact_set'] as Array<any>).map(ArtifactSetsToJSON)),
        'galleries': value['galleries'] == null ? undefined : ((value['galleries'] as Array<any>).map(GalleryToJSON)),
    };
}

