/* tslint:disable */
/* eslint-disable */
/**
 * Karasu Lab API
 * API documentation for Karasu Lab
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ArtifactsControllerGetRequestVersion,
  VersionsEntity,
} from '../models/index';
import {
    ArtifactsControllerGetRequestVersionFromJSON,
    ArtifactsControllerGetRequestVersionToJSON,
    VersionsEntityFromJSON,
    VersionsEntityToJSON,
} from '../models/index';

export interface VersionsControllerGetRequest {
    ArtifactsControllerGetRequestVersion: ArtifactsControllerGetRequestVersion;
}

export interface VersionsControllerGetAllRequest {
    skip?: number;
    take?: number;
}

export interface VersionsControllerGetOneRequest {
    ArtifactsControllerGetRequestVersion: ArtifactsControllerGetRequestVersion;
}

/**
 * VersionsApi - interface
 * 
 * @export
 * @interface VersionsApiInterface
 */
export interface VersionsApiInterface {
    /**
     * 
     * @param {ArtifactsControllerGetRequestVersion} ArtifactsControllerGetRequestVersion 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionsApiInterface
     */
    versionsControllerGetRaw(requestParameters: VersionsControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VersionsEntity>>>;

    /**
     */
    versionsControllerGet(ArtifactsControllerGetRequestVersion: ArtifactsControllerGetRequestVersion, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VersionsEntity>>;

    /**
     * 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionsApiInterface
     */
    versionsControllerGetAllRaw(requestParameters: VersionsControllerGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VersionsEntity>>>;

    /**
     */
    versionsControllerGetAll(skip?: number, take?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VersionsEntity>>;

    /**
     * 
     * @param {ArtifactsControllerGetRequestVersion} ArtifactsControllerGetRequestVersion 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionsApiInterface
     */
    versionsControllerGetOneRaw(requestParameters: VersionsControllerGetOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionsEntity>>;

    /**
     */
    versionsControllerGetOne(ArtifactsControllerGetRequestVersion: ArtifactsControllerGetRequestVersion, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionsEntity>;

}

/**
 * 
 */
export class VersionsApi extends runtime.BaseAPI implements VersionsApiInterface {

    /**
     */
    async versionsControllerGetRaw(requestParameters: VersionsControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VersionsEntity>>> {
        if (requestParameters['ArtifactsControllerGetRequestVersion'] == null) {
            throw new runtime.RequiredError(
                'ArtifactsControllerGetRequestVersion',
                'Required parameter "ArtifactsControllerGetRequestVersion" was null or undefined when calling versionsControllerGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wiki/genshin/versions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArtifactsControllerGetRequestVersionToJSON(requestParameters['ArtifactsControllerGetRequestVersion']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VersionsEntityFromJSON));
    }

    /**
     */
    async versionsControllerGet(ArtifactsControllerGetRequestVersion: ArtifactsControllerGetRequestVersion, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VersionsEntity>> {
        const response = await this.versionsControllerGetRaw({ ArtifactsControllerGetRequestVersion: ArtifactsControllerGetRequestVersion }, initOverrides);
        return await response.value();
    }

    /**
     */
    async versionsControllerGetAllRaw(requestParameters: VersionsControllerGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VersionsEntity>>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wiki/genshin/versions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VersionsEntityFromJSON));
    }

    /**
     */
    async versionsControllerGetAll(skip?: number, take?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VersionsEntity>> {
        const response = await this.versionsControllerGetAllRaw({ skip: skip, take: take }, initOverrides);
        return await response.value();
    }

    /**
     */
    async versionsControllerGetOneRaw(requestParameters: VersionsControllerGetOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionsEntity>> {
        if (requestParameters['ArtifactsControllerGetRequestVersion'] == null) {
            throw new runtime.RequiredError(
                'ArtifactsControllerGetRequestVersion',
                'Required parameter "ArtifactsControllerGetRequestVersion" was null or undefined when calling versionsControllerGetOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wiki/genshin/versions/getOne`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArtifactsControllerGetRequestVersionToJSON(requestParameters['ArtifactsControllerGetRequestVersion']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionsEntityFromJSON(jsonValue));
    }

    /**
     */
    async versionsControllerGetOne(ArtifactsControllerGetRequestVersion: ArtifactsControllerGetRequestVersion, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionsEntity> {
        const response = await this.versionsControllerGetOneRaw({ ArtifactsControllerGetRequestVersion: ArtifactsControllerGetRequestVersion }, initOverrides);
        return await response.value();
    }

}
